#include <iostream> 
using namespace std; 
class SimpleDeque { 
    int arr[10]; 
    int front, rear; 
public: 
    SimpleDeque() { 
        front = -1; 
        rear = -1; 
    } 

 void insertRear(int x) { 
        if (rear == 9) { 
            cout << "Deque is full at rear\n"; 
            return; 
        } 
        if (front == -1) front = 0; 
        arr[++rear] = x; 
        cout << "Inserted " << x << " at rear\n"; 
    } 
    void insertFront(int x) { 
        if (front <= 0) { 
            cout << "Cannot insert at front\n"; 
            return; 
        } 
        arr[--front] = x; 
        cout << "Inserted " << x << " at front\n"; 
    } 
    void deleteFront() { 
        if (isEmpty()) { 
            cout << "Deque is empty\n"; 
            return; 
        } 
        cout << "Deleted " << arr[front] << " from front\n"; 
        front++; 
        if (front > rear) front = rear = -1; 
    } 
    void deleteRear() { 
        if (isEmpty()) { 
            cout << "Deque is empty\n"; 
            return;
  } 
        cout << "Deleted " << arr[rear] << " from rear\n"; 
        rear--; 
        if (rear < front) front = rear = -1; 
    } 
    void display() { 
        if (isEmpty()) { 
            cout << "Deque is empty\n"; 
            return; 
        } 
        cout << "Deque: "; 
        for (int i = front; i <= rear; i++) 
            cout << arr[i] << " "; 
        cout << "\n"; 
    } 
    bool isEmpty() { 
        return front == -1 || front > rear; 
    } 
}; 
 
int main() { 
    SimpleDeque dq; 
    dq.insertRear(10); 
    dq.insertRear(20); 
    dq.insertRear(30); 
    dq.display(); 
    dq.deleteFront(); 
    dq.display(); 
    dq.insertFront(5); 
    dq.display();
 dq.deleteRear(); 
    dq.display(); 
    dq.deleteFront(); 
    dq.deleteFront(); 
    dq.deleteFront(); // Should show empty 
    dq.display(); 
    return 0; 
}
